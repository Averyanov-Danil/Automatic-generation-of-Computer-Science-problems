В данном текстовом файле храинться общее описание и инструкции к использовнию данного проекта,
	очень рекомендую в первую очередь прочитать его, перед внесением каких либо изменений в проект.

	Для начала пройдемся по папкам
		1) FormTask:
			- Хранит в себе весь необходимый функционал для визуализации небходимых настроек для каждого типа задач.
				
				Type1F:
				Обработчики событий (initialNum_ValueChanged, lastNum_ValueChanged_1, и другие): 
					Эти методы обрабатывают изменения значений различных элементов управления на форме, 
					таких как числовые поля (NumericUpDown) и переключатели (RadioButton). 
					При изменении значений происходит обновление текстовых меток на форме.
				
				Метод rbtn_SelectedIntOrDouble: Этот метод обрабатывает изменения в выборе типа 
					(целое число или вещественное число) и скрывает/отображает соответствующие элементы управления на форме.
				
				Метод btnAddTask_Click: Этот метод выполняет действия при 
					нажатии кнопки "Добавить задачу". Внутри метода генерируется случайное число и 
					создается объект задачи (CurrentTask1 или CurrentTask2), в зависимости от выбора пользователя. 
					Затем задача добавляется, и выводится диалоговое окно с сообщением.
				
				Метод rbtnC1_10_CheckedChanged: Этот метод обрабатывает изменения в выборе основания 
					числовой системы и скрывает/отображает соответствующие элементы управления на форме

				Type3F:
				Конструктор класса Type3F: Конструктор принимает параметр form типа CreateForm и 
					инициализирует его в поле CreateForm. Вызывается метод InitializeComponent(), 
					который инициализирует компоненты формы. Устанавливаются видимость для элементов num1ValuePoints и 
					num2ValuePoints в зависимости от значений чекбоксов num1ValuePointsChecked и num2ValuePointsChecked.
				Обработчики событий: В коде определены три метода-обработчика событий: 
					num1ValuePointsChecked_CheckedChanged, num2ValuePointsChecked_CheckedChanged, и btnAddTask_Click. 
					Эти методы выполняются в ответ на различные события на форме (изменение состояния чекбоксов и нажатие кнопки).
				Метод btnAddTask_Click: Этот метод выполняется при нажатии кнопки btnAddTask. Он собирает данные с различных 
					элементов формы (числа, чекбоксы) и создает объект CurrentTask3. Затем объект задачи добавляется в коллекцию с 
					использованием TemplateManager.AddTask(task). После добавления задачи отображается сообщение и происходит 
					взаимодействие с элементами формы CreateForm.

				Type4F:
					Не требует описания, т.к код достаточно понятен сам по себе

				Type5F:
					Не требует oписания, т.к код достаточно понятен сам по себе
				
				Type6F:
					Не требует описания, т.к код достаточно понятен сам по себе

				Type7F
					Не требует описания, т.к код достаточно понятен сам по себе

		2) Model
			- Хранит в себе классы задач. Иногда один тип задачи, это два класса, пожалуйста, обратите на это внимание. 
				Так же хранит себе функционал для работы с шаблонами.
			Именно в данную папку стоит добавлять функционал при добавлении нового типа задачи. 
			Файлы Template и TaskBase изменять ненужно.

		3) NumberConverter
			- Пожалуй самый освновной класс, реализует переводы из одной системы счисления в другую
			Этот класс NumberConverter представляет собой статический класс в C#, который предоставляет функциональность 
			для конвертации чисел из одной системы счисления в другую. 
			Давайте разберем его основные элементы: DigitToChar(int digit) метод: 
				Этот метод преобразует цифры (цифры с базы 0 до 15) в символы для представления в разных системах счисления 
				(от 0 до 9 и от A до F для шестнадцатеричной системы) Если digit находится в допустимом диапазоне, метод 
				возвращает соответствующий символ. В противном случае он генерирует исключение ArgumentException. 
			ConvertBase(string number, int baseFrom, int baseTo) метод: 
				Этот метод преобразует число number из одной системы счисления (baseFrom) в другую систему 
				счисления (baseTo) и возвращает результат в виде строки. Вначале метод парсит строку number в формате 
				с плавающей запятой (с учетом текущей локали). Затем он разбивает число на целую и десятичную части.
				Далее, целая часть преобразуется в новую систему счисления, и результат записывается в result. Если 
				дробная часть числа существует, то она также преобразуется и добавляется к result. Обратите внимание, 
				что метод обрабатывает исключения FormatException (неправильный формат числа) и ArgumentException 
				(недопустимая цифра) и возвращает соответствующие сообщения об ошибке. 
			Примечания: Этот класс позволяет конвертировать числа в различных системах счисления, 
			включая целые и дробные числа. Он предполагает, что числа представлены в формате строки, и осуществляет 
			преобразование между системами счисления на основе числовых значений. Важно убедиться, что числа и системы 
			счисления передаются правильно, чтобы избежать ошибок.


Как добавить новый тип?
	Вам нужно будет создать форму со всеми необходимыми параметрами.
	Далее необходимо создать класс нового типа задачи, унаследоваться от "TaskBase" и прописать метод "GenerateTaskAndSolutions".
	При добавлении задачи в форме, нужно указать ее тип (не важно какой он будет, важно лишь что потом вы должны будете его считать),
		указать все необходимые для вашего типа параметры, и добавить в статический лист, от класса TemplateManager. (taskStatic.Add({ваша задача})).
	Для примера смотрите код добавления в формах и классах других задач.



	
